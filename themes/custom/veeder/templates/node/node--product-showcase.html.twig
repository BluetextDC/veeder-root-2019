{#
/**
 * @file
 * Default theme implementation to display a node.
 *
 * Available variables:
 * - node: The node entity with limited access to object properties and methods.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - node.getCreatedTime() will return the node creation timestamp.
 *   - node.hasField('field_example') returns TRUE if the node bundle includes
 *     field_example. (This does not indicate the presence of a value in this
 *     field.)
 *   - node.isPublished() will return whether the node is published or not.
 *   Calling other methods, such as node.delete(), will result in an exception.
 *   See \Drupal\node\Entity\Node for a full list of public properties and
 *   methods for the node object.
 * - label: The title of the node.
 * - content: All node items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - author_picture: The node author user entity, rendered using the "compact"
 *   view mode.
 * - metadata: Metadata for this node.
 * - date: Themed creation date field.
 * - author_name: Themed author name field.
 * - url: Direct URL of the current node.
 * - display_submitted: Whether submission information should be displayed.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - node: The current template type (also known as a "theming hook").
 *   - node--type-[type]: The current node type. For example, if the node is an
 *     "Article" it would result in "node--type-article". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - node--view-mode-[view_mode]: The View Mode of the node; for example, a
 *     teaser would result in: "node--view-mode-teaser", and
 *     full: "node--view-mode-full".
 *   The following are controlled through the node publishing options.
 *   - node--promoted: Appears on nodes promoted to the front page.
 *   - node--sticky: Appears on nodes ordered above other non-sticky nodes in
 *     teaser listings.
 *   - node--unpublished: Appears on unpublished nodes visible only to site
 *     admins.
 * - title_attributes: Same as attributes, except applied to the main title
 *   tag that appears in the template.
 * - content_attributes: Same as attributes, except applied to the main
 *   content tag that appears in the template.
 * - author_attributes: Same as attributes, except applied to the author of
 *   the node tag that appears in the template.
 * - title_prefix: Additional output populated by modules, intended to be
 *   displayed in front of the main title tag that appears in the template.
 * - title_suffix: Additional output populated by modules, intended to be
 *   displayed after the main title tag that appears in the template.
 * - view_mode: View mode; for example, "teaser" or "full".
 * - teaser: Flag for the teaser state. Will be true if view_mode is 'teaser'.
 * - page: Flag for the full page state. Will be true if view_mode is 'full'.
 * - readmore: Flag for more state. Will be true if the teaser content of the
 *   node cannot hold the main body content.
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_node()
 *
 * @todo Remove the id attribute (or make it a class), because if that gets
 *   rendered twice on a page this is invalid CSS for example: two lists
 *   in different view modes.
 *
 * @ingroup themeable
 */
#}
<div{{ attributes }}>

  {{ title_prefix }}
  {% if not page %}
    <h2{{ title_attributes }}>
      <a href="{{ url }}" rel="bookmark">{{ label }}</a>
    </h2>
  {% endif %}
  {{ title_suffix }}

  <section class="product-showcase hero-section{% if (content.field_product_show_hero_bg_image|render is empty) and (content.field_product_show_hero_vimeo|render is empty) %} NoHero-sec{% endif %}">
    <div class="inner-banner{% if content.field_product_show_hero_vimeo|render is not empty %} video-banner{% endif %}">
      {% if (content.field_product_show_hero_vimeo|render is not empty) and (content.field_product_show_hero_autopla.0["#markup"] == 0) %}
        <a href="{{ node.field_product_show_hero_vimeo.0.value }}" data-fancybox class="c-video bg-img"{% if content.field_product_show_hero_bg_image_paralla.0["#markup"] == 1 %} id="parallax"{% endif %} style="background: url({{ vimeo_thumb }}) no-repeat center / cover;">
          <span class="play-icon ic-play-icon"></span>
        </a>
      {% elseif (content.field_product_show_hero_vimeo|render is not empty) and (content.field_product_show_hero_autopla.0["#markup"] == 1) and (content.field_product_show_hero_bg_image|render is not empty) %}
        <div id="home-video-loader"><img src="{{ base_path ~ directory }}/images/video-loader.gif" alt="image-loader"></div>
        <div class="vimeo-bg-video">
          <iframe src="{{ node.field_product_show_hero_vimeo.0.value }}?background=1&autoplay=1&loop=1&byline=0&title=0" frameborder="0" webkitallowfullscreen mozallowfullscreen allowfullscreen></iframe>
        </div>
        <div class="bg-img mobile-banner-img"{% if content.field_product_show_hero_bg_image_paralla.0["#markup"] == 1 %} id="parallax"{% endif %} style="background: url({{ file_url(content.field_product_show_hero_bg_image['#items'].entity.uri.value) }}) no-repeat center / cover;">
        </div>
      {% elseif (content.field_product_show_hero_bg_image|render is not empty) and (content.field_product_show_hero_bg_image|render is empty) %}
        <div class="bg-img"{% if content.field_product_show_hero_bg_img_p.0["#markup"] == 1 %} id="parallax"{% endif %} style="background: url({{ file_url(content.field_product_show_hero_bg_image['#items'].entity.uri.value) }}) no-repeat center / cover;">
        </div>
      {% endif %}
      <div class="banner-caption{% if content.field_product_show_hero_image.0|render is not empty %} img-title-cap{% endif %}" style="background-color: {{ content.field_product_show_hero_plte_cor.0 }};">
        <div class="caption-wrap">
          {% if content.field_product_show_hero_image.0|render is not empty %}
            <div class="cap-img bg-white">
              <figure>
                {{ content.field_product_show_hero_image.0 }}
              </figure>
            </div>
          {% endif %}                         
          <div class="desc">
            <h2>{{ content.field_product_show_hero_heading.0 }}</h2> 
          </div>
        </div>
      </div>                           
    </div>
  </section>

  {# -- content area part -- #}
  <div class="main-content">
    {{ content.field_components }}

    {# Render other fields if client will create #}
    {{ content|without('field_breadcrumb_color', 'field_components', 'field_display_breadcrumbs', 'field_display_contact_sidebar', 'field_display_contact_footer', 'field_enable_jump_nav', 'field_contact_footer_form', 'field_product_show_hero_heading', 'field_product_show_hero_bg_image', 'field_product_show_hero_plte_cor', 'field_product_show_hero_image', 'field_product_show_hero_vimeo', 'field_product_show_hero_autopla', 'field_product_show_hero_bg_img_p', 'field_product_tags', 'field_solution_tags', 'field_summary', 'field_taxonomy_image', 'field_product_refer_weight', 'field_solution_refer_weight', 'field_color_variation') }}

    {# Include template #}
    {% include directory ~ '/templates/parts/contact-footer.html.twig' %}
  </div>
</div>
