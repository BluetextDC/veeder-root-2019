{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   - id: The paragraph ID.
 *   - bundle: The type of the paragraph, for example, "image" or "text".
 *   - authorid: The user ID of the paragraph author.
 *   - createdtime: Formatted creation date. Preprocess functions can
 *     reformat it by calling format_date() with the desired parameters on
 *     $variables['paragraph']->getCreatedTime().
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
set classes = [
    'paragraph',
    'paragraph' ~ paragraph.id(),
    'paragraph--' ~ paragraph.bundle|clean_class,
    view_mode ? paragraph.bundle|clean_class ~ '--' ~ view_mode|clean_class,
  ]
%}

{% set document_data = content.field_add_documentation_sec_doc['#items'] | length %}
{% set document_items = {} %}
{% for key, i in 0..document_data - 1 %}
  {% set items = {
      document_heading: content.field_add_documentation_sec_doc[i]['#paragraph'].field_documentation_doc_name.value,
      document_file: content.field_add_documentation_sec_doc[i]['#paragraph'].field_add_documentation_doc_file.uri,
    }
  %}
  {% set document_items = document_items|merge({(key): items}) %}
{% endfor %}

{% block paragraph %}
  {% block content %}
    <div class="doc-list">
      <label>{{ content.field_documentation_sec_heading }}</label>
      <ul>
        {% for document_item in document_items %}
          <li>
            {% if document_item.document_file is not empty %}
              <a href="{{ document_item.document_file }}" class="ic-download download documentation-link" target="_blank"></a>
            {% endif %}
            <a href="{{ document_item.document_file }}" class ="documentation-link" target="_blank">{{ document_item.document_heading }}</a>
          </li>
        {% endfor %}
      </ul>
    </div>
  {% endblock %}
{% endblock paragraph %}
