{#
/**
 * @file
 * Default theme implementation to display a paragraph.
 *
 * Available variables:
 * - paragraph: Full paragraph entity.
 *   Only method names starting with "get", "has", or "is" and a few common
 *   methods such as "id", "label", and "bundle" are available. For example:
 *   - paragraph.getCreatedTime() will return the paragraph creation timestamp.
 *   - paragraph.id(): The paragraph ID.
 *   - paragraph.bundle(): The type of the paragraph, for example, "image" or "text".
 *   - paragraph.getOwnerId(): The user ID of the paragraph author.
 *   See Drupal\paragraphs\Entity\Paragraph for a full list of public properties
 *   and methods for the paragraph object.
 * - content: All paragraph items. Use {{ content }} to print them all,
 *   or print a subset such as {{ content.field_example }}. Use
 *   {{ content|without('field_example') }} to temporarily suppress the printing
 *   of a given child element.
 * - attributes: HTML attributes for the containing element.
 *   The attributes.class element may contain one or more of the following
 *   classes:
 *   - paragraphs: The current template type (also known as a "theming hook").
 *   - paragraphs--type-[type]: The current paragraphs type. For example, if the paragraph is an
 *     "Image" it would result in "paragraphs--type--image". Note that the machine
 *     name will often be in a short form of the human readable label.
 *   - paragraphs--view-mode--[view_mode]: The View Mode of the paragraph; for example, a
 *     preview would result in: "paragraphs--view-mode--preview", and
 *     default: "paragraphs--view-mode--default".
 * - view_mode: View mode; for example, "preview" or "full".
 * - logged_in: Flag for authenticated user status. Will be true when the
 *   current user is a logged-in member.
 * - is_admin: Flag for admin user status. Will be true when the current user
 *   is an administrator.
 *
 * @see template_preprocess_paragraph()
 *
 * @ingroup themeable
 */
#}
{%
  set classes = [
    'paragraph',
    'space-small',
    'mt-3',
    'paragraph-' ~ paragraph.id(),
    'paragraph--' ~ paragraph.bundle|clean_class,
    view_mode ? paragraph.bundle|clean_class ~ '--' ~ view_mode|clean_class,
  ]
%}

{# Checking front page for making space between section #}
{% if is_front == true %}
  {% set classes = classes|merge(['about-sec']) %}
{% else %}
  {% set classes = classes|merge(['four-block-sec']) %}
{% endif %}

{% set column_data = content.field_4_column_add_cta['#items'] | length %}
{% set column_items = {} %}

{% for key, i in 0..column_data - 1 %}
  {% set items = {
      title: content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_heading.value,
      description: content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_description.value,
      link_title: content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_cta.value[0].title,
      link_url: content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_cta[0].url,
      link_target: content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_cta.value[0].options.attributes.target,
      image_uri: content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_image.entity.uri.value ? content.field_4_column_add_cta[i]['#paragraph'].field_column_cta_image.entity.uri.value : '',
    }
  %}
  {% set column_items = column_items|merge({(key): items}) %}
{% endfor %}

{% block paragraph %}
  <section{{ attributes.addClass(classes) }} id="{{ content.field_4_column_cta_block_id.0 }}"{% if is_front != true %} style="background-color: {{ content.field_4_column_cta_block_color.0 }};"{% endif %}>
  <style>
    {{ content.field_4_column_cta_block_id.0 }} div.block-list div.item a.four-column-cta-btn:hover,
    {{ content.field_4_column_cta_block_id.0 }} div.block-list div.item a.four-column-cta-btn:focus,
    {{ content.field_4_column_cta_block_id.0 }} div.block-list div.item a.four-column-cta-btn:active {
      color: {{ content.field_4_column_cta_block_color.0 }} !important;
      background-color: #ffffff;
    }
  </style>
  {% block content %}
    <div class="container">
      <div{% if is_front == true %} class="four-block-sec space-large sec-top" style="background-color: {{ content.field_4_column_cta_block_color.0 }};"{% else %} class="four-column-inner-section"{% endif %}>
        <div class="heading text-center" style="color: {{ content.field_4_column_cta_block_head_co.0 }};">
          <h2 style="color: {{ content.field_4_column_cta_block_head_co.0 }};">{{ content.field_4_column_cta_block_heading.0 }}</h2>
        </div>
        <div class="block-list row">
          {% for items in column_items %}
            <div class="item col-md-3 col-6">
              <div class="cd-wrap" style="color: {{ content.field_4_column_cta_block_head_co.0 }};">
                {% if items.image_uri is not empty %}
                  {% set cta_image_with_style = {
                      '#theme':      'image_style',
                      '#style_name': '4_column_cta',
                      '#uri':        items.image_uri,
                      '#alt':        items.title,
                    } 
                  %}
                  <figure>
                    {{ cta_image_with_style }}
                  </figure>
                {% endif %}
                <h6>{{ items.title }}</h6>
                {{ items.description|raw }}
              </div>
              {% if items.link_title|render is not empty %}
                <a href="{{ items.link_url }}"{% if content.field_4_column_cta_button_stylin.0["#markup"] == 1 %} class="btn four-column-cta-btn"{% else %} class="btn-link four-column-cta-btn"{% endif %} {% if items.link_target is not empty %}target="{{ items.link_target }}"{% endif %}>{{ items.link_title }}</a>
              {% endif %}
            </div>
          {% endfor %}
        </div>
      </div>
    </div>
  {% endblock %}
  </section>
{% endblock paragraph %}
